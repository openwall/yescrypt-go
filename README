!!! NOTE !!!

Official Go x/crypto repository now includes scrypt implementation.
Please use it instead of this one, as it will be supported there.

Link: https://pkg.go.dev/golang.org/x/crypto

It is compatible with this implementation, so to switch to it,
just change the import path to "golang.org/x/crypto/scrypt".

!!!

Go implementation of scrypt key derivation function.
(https://www.tarsnap.com/scrypt.html)

INSTALLATION

    $ go get github.com/dchest/scrypt

PACKAGE
    import "github.com/dchest/scrypt"

    Package scrypt implements the scrypt key derivation function as defined
    in Colin Percival's paper "Stronger Key Derivation via Sequential
    Memory-Hard Functions".

FUNCTIONS

func Key(password, salt []byte, N, r, p, keyLen int) ([]byte, error)

    Key derives a key from the password, salt and cost parameters, returning
    a byte slice of length keyLen that can be used as cryptographic key.

    N is a CPU/memory cost parameter, must be a power of two greater than 1.
    r and p must satisfy r * p < 2³⁰. If the parameters do not satisfy the
    limits, the function returns a nil byte slice and an error.

    For example, you can get a derived key for e.g. AES-256 (which needs a
    32-byte key) by doing:

	dk, err := scrypt.Key([]byte("some password"), salt, 32768, 8, 1, 32)

The recommended parameters for interactive logins as of 2017 are N=32768, r=8
and p=1. The parameters N, r, and p should be increased as memory latency and
CPU parallelism increases; consider setting N to the highest power of 2 you
can derive within 100 milliseconds. Remember to get a good random salt.

KEYWORDS
   
    go, golang, scrypt, kdf

